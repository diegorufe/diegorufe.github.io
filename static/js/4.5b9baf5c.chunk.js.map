{"version":3,"sources":["rfreactlib/base/basePage/index.js","rfreactlib/utils/UtilsBytes.js","rfreactlib/base/baseBeansService/index.js","rfreactlib/input/baseInput/index.js","rfreactlib/input/textarea/index.js","app/core/components/hextodecimal/index.js"],"names":["BasePage","props","state","changed","BaseComponent","propTypes","UtilsBytes","hexValue","result","resultAppend","i","length","String","fromCharCode","parseInt","substr","UtilsCommons","isNotNull","includes","exception","console","error","toString","padStart","Limit","start","end","this","Filter","field","filterType","value","alias","filterOperationType","openBrackets","closeBrackets","propertyValue","Object","assign","undefined","BaseInputComponent","onChange","bind","onKeyDown","added","service","executeLostFocus","type","getType","crudComponent","addComponent","inputRender","renderInput","className","renderLabel","renderRequired","container","required","disabled","rendered","label","renderValue","setState","change","modelProperties","takeModelProperties","model","properties","valueRender","fixService","build","loadNew","property","split","fieldSeparator","element","search","filters","push","propertyFind","list","data","propertyId","parent","document","getElementById","id","propertie2","property2","serviceName","RFContext","contextResolver","getService","event","self","responseMethod","UtilsError","applyFunctionWithHandlerError","target","checked","fixValue","getResponseMethodFromException","hasError","renderError","keyCode","idButton","button","click","app","PropTypes","object","string","bool","max","any","size","min","defaultstyleClass","styleClass","rows","cols","tag","defaultProps","TextAreaComponent","maxLength","onBlur","style","display","HexToDecimalComponent","transform","key","uniqueID","i18n","__","onClick","tmpResult","hexToDecimal","changeState"],"mappings":"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","file":"static/js/4.5b9baf5c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./index.css\";\r\nimport BaseComponent from \"../baseComponent\";\r\n\r\n/**\r\n * Base class for page\r\n */\r\nexport default class BasePage extends BaseComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { changed: false };\r\n  }\r\n}\r\n\r\nBasePage.propTypes = {};\r\n","import UtilsCommons from \"./UtilsCommons\";\r\n\r\nexport default class UtilsBytes {\r\n  /**\r\n   * Method for convert hex value to  text\r\n   * @param {*} hexValue to convert\r\n   * @returns text to hex value\r\n   */\r\n  static hexToText(hexValue) {\r\n    let result = null;\r\n    let resultAppend = null;\r\n    try {\r\n      for (let i = 0; i < hexValue.length; i += 2) {\r\n        if (result == null) {\r\n          result = \"\";\r\n        }\r\n        resultAppend = String.fromCharCode(parseInt(hexValue.substr(i, 2), 16));\r\n        if (UtilsCommons.isNotNull(resultAppend)) {\r\n          result += resultAppend;\r\n        }\r\n      }\r\n      if (result.includes(\"NaN\")) {\r\n        result = null;\r\n      }\r\n    } catch (exception) {\r\n      result = null;\r\n      console.error(\"Error in hexToText: \" + exception);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Method for convert hex value to decimal\r\n   * @param {*} hexValue to convert\r\n   * @returns text to hex value\r\n   */\r\n  static hexToDecimal(hexValue) {\r\n    let result = null;\r\n    try {\r\n      result = parseInt(hexValue, 16);\r\n      if ((\"\" + result).includes(\"NaN\")) {\r\n        result = null;\r\n      }\r\n    } catch (exception) {\r\n      result = null;\r\n      console.error(\"Error in hexToDecimal: \" + exception);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Method for convert hex value to decimal\r\n   * @param {*} hexValue\r\n   */\r\n  static hexToBinary(hexValue) {\r\n    let result = null;\r\n    try {\r\n      result = parseInt(hexValue, 16).toString(2).padStart(8, \"0\");\r\n      if (result.includes(\"NaN\")) {\r\n        result = null;\r\n      }\r\n    } catch (exception) {\r\n      result = null;\r\n      console.error(\"Error in hexToBinary: \" + exception);\r\n    }\r\n    return result;\r\n  }\r\n}\r\n","export default class Limit {\r\n  constructor(start, end) {\r\n    this.start = start;\r\n    this.end = end;\r\n  }\r\n}\r\n\r\nexport class Join {\r\n  constructor(field, joinType, alias, customQueryJoin) {\r\n    this.field = field;\r\n    this.joinType = joinType;\r\n    this.alias = alias;\r\n    this.customQueryJoin = customQueryJoin;\r\n    this.aliasJoinField = null;\r\n  }\r\n}\r\n\r\nexport class Field {\r\n  constructor(name, aliasTabla, aliasField, customField) {\r\n    this.name = name;\r\n    this.aliasTabla = aliasTabla;\r\n    this.aliasField = aliasField;\r\n    this.customField = customField;\r\n  }\r\n}\r\n\r\nexport class Filter {\r\n  constructor(\r\n    field,\r\n    filterType,\r\n    value,\r\n    alias,\r\n    filterOperationType,\r\n    openBrackets,\r\n    closeBrackets\r\n  ) {\r\n    this.field = field;\r\n    this.filterType = filterType || \"EQUAL\";\r\n    this.value = value;\r\n    this.alias = alias;\r\n    this.filterOperationType = filterOperationType;\r\n    this.openBrackets = openBrackets;\r\n    this.closeBrackets = closeBrackets;\r\n    this.propertyValue = null;\r\n  }\r\n\r\n  /**\r\n   * Method for resolve value\r\n   */\r\n  resolveFilterValue() {\r\n    let result = Object.assign(new Filter(), this);\r\n    if (\r\n      this.value != null &&\r\n      this.value != undefined &&\r\n      this.propertyValue != null &&\r\n      this.propertyValue != undefined\r\n    ) {\r\n      result.value = this.value[this.propertyValue];\r\n    }\r\n    return result;\r\n  }\r\n}\r\n\r\nexport class Order {\r\n  constructor(field, orderType, alias) {\r\n    this.field = field;\r\n    this.alias = alias;\r\n    this.orderType = orderType;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./index.css\";\r\nimport BaseComponent from \"../../base/baseComponent\";\r\nimport RFContext from \"rfreactlib/context\";\r\nimport Limit, { Filter } from \"rfreactlib/base/baseBeansService\";\r\nimport PropTypes from \"prop-types\";\r\nimport UtilsError from \"../../utils/UtilsError\";\r\n\r\n/**\r\n * Base class for inputs\r\n */\r\nexport default class BaseInputComponent extends BaseComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onChange = this.onChange.bind(this);\r\n    this.onKeyDown = this.onKeyDown.bind(this);\r\n    this.added = false;\r\n    this.service = null;\r\n    this.executeLostFocus = true;\r\n  }\r\n\r\n  /**\r\n   * Method for get type for input\r\n   */\r\n  getType() {\r\n    return \"text\";\r\n  }\r\n\r\n  /**\r\n   * Method for get default state props\r\n   */\r\n  defaultStateProps() {\r\n    let value = \"\";\r\n    let type = this.getType();\r\n\r\n    if (type == \"number\") {\r\n      value = 0;\r\n    } else if (type == \"checkbox\") {\r\n      value = false;\r\n    } else if (type == \"color\") {\r\n      value = \"#ffffff\";\r\n    }\r\n\r\n    return {\r\n      changed: false,\r\n      value: value,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Method for render input\r\n   */\r\n  renderInput() {\r\n    return null;\r\n  }\r\n\r\n  defaultRender() {\r\n    if (this.props.crudComponent != null && !this.added) {\r\n      this.props.crudComponent.addComponent(this);\r\n      this.added = true;\r\n    }\r\n\r\n    let inputRender = this.renderInput();\r\n    let container = null;\r\n\r\n    container = (\r\n      <div className=\"InputComponent\">\r\n        {this.renderLabel()}\r\n        {inputRender}\r\n        {this.renderRequired()}\r\n      </div>\r\n    );\r\n    return container;\r\n  }\r\n\r\n  /**\r\n   * Method for render required\r\n   */\r\n  renderRequired() {\r\n    let container = null;\r\n    if (this.props.required && !this.props.disabled) {\r\n      container = <div className=\"InputComponentRequired\">*</div>;\r\n    }\r\n    return container;\r\n  }\r\n\r\n  /**\r\n   * Method for render label for component\r\n   */\r\n  renderLabel() {\r\n    if (this.props.rendered) {\r\n      let container = null;\r\n      let type = this.getType();\r\n      if (\r\n        this.props.label != null &&\r\n        this.props.label != undefined &&\r\n        (type == \"text\" ||\r\n          type == \"number\" ||\r\n          type == \"color\" ||\r\n          type == \"textarea\")\r\n      ) {\r\n        container = (\r\n          <div className=\"InputLabelComponent\">{this.props.label}</div>\r\n        );\r\n      }\r\n      return container;\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    let renderValue = await this.renderValue();\r\n    let type = this.getType();\r\n    if (renderValue == null) {\r\n      if (type == \"text\" || type == \"textarea\") {\r\n        renderValue = \"\";\r\n      } else if (type == \"number\") {\r\n        renderValue = 0;\r\n      } else if (type == \"checkbox\") {\r\n        renderValue = false;\r\n      } else if (type == \"color\") {\r\n        renderValue = \"#ffffff\";\r\n      }\r\n    }\r\n    if (this.state.value != renderValue) {\r\n      this.setState({ change: true, value: renderValue });\r\n    }\r\n  }\r\n\r\n  async componentDidUpdate() {\r\n    let renderValue = await this.renderValue();\r\n    let type = this.getType();\r\n    if (renderValue == null) {\r\n      if (type == \"text\" || type == \"textarea\") {\r\n        renderValue = \"\";\r\n      } else if (type == \"number\") {\r\n        renderValue = 0;\r\n      } else if (type == \"checkbox\") {\r\n        renderValue = false;\r\n      } else if (type == \"color\") {\r\n        renderValue = \"#ffffff\";\r\n      }\r\n    }\r\n    if (this.state.value != renderValue) {\r\n      this.setState({ change: true, value: renderValue });\r\n    }\r\n  }\r\n\r\n  async renderValue() {\r\n    let modelProperties = this.takeModelProperties();\r\n    let model = modelProperties[0];\r\n    let properties = modelProperties[1];\r\n    let valueRender = null;\r\n\r\n    if (properties.length <= 1) {\r\n      valueRender = model[properties[0]];\r\n    } else if (properties.length == 2) {\r\n      if (model[properties[0]] == null || model[properties[0]] == undefined) {\r\n        this.fixService();\r\n        if (this.service != null) {\r\n          try {\r\n            model[properties[0]] = this.service.build();\r\n          } catch (ex) {\r\n            model[properties[0]] = await this.service.loadNew();\r\n            model[properties[0]][properties[1]] = null;\r\n          }\r\n        }\r\n      }\r\n      if (model != null && model != undefined) {\r\n        try {\r\n          valueRender = model[properties[0]][properties[1]];\r\n        } catch (ex) {\r\n          if (\r\n            model[properties[0]] == null ||\r\n            model[properties[0]] == undefined\r\n          ) {\r\n            this.fixService();\r\n            model[properties[0]] = await this.service.loadNew();\r\n          }\r\n          valueRender = model[properties[0]][properties[1]];\r\n        }\r\n      }\r\n    }\r\n    return valueRender;\r\n  }\r\n\r\n  takeModelProperties() {\r\n    let properties = null;\r\n    let model = null;\r\n\r\n    if (this.props.model != null && this.props.model != undefined) {\r\n      model = this.props.model;\r\n      properties = this.props.property.split(this.props.fieldSeparator);\r\n    } else if (\r\n      this.props.crudComponent != null &&\r\n      this.props.crudComponent != undefined &&\r\n      (this.props.model == null || this.props.model == undefined)\r\n    ) {\r\n      model = this.props.crudComponent.element;\r\n      properties = this.props.property.split(this.props.fieldSeparator);\r\n    } else {\r\n      model = this.props.model;\r\n      properties = this.props.property.split(this.props.fieldSeparator);\r\n    }\r\n    return [model, properties];\r\n  }\r\n\r\n  async fixValue(valueRender, search) {\r\n    if (search == null || search == undefined) {\r\n      search = false;\r\n    }\r\n\r\n    let modelProperties = this.takeModelProperties();\r\n    let model = modelProperties[0];\r\n    let properties = modelProperties[1];\r\n\r\n    this.fixService();\r\n\r\n    if (this.service != null && this.service != undefined && search) {\r\n      let filters = [];\r\n\r\n      filters.push(\r\n        new Filter(this.props.propertyFind || \"code\", null, valueRender)\r\n      );\r\n\r\n      let data = await this.service.list(\r\n        null,\r\n        filters,\r\n        null,\r\n        null,\r\n        new Limit(0, 1)\r\n      );\r\n\r\n      if (data != null && data != undefined && data.length > 0) {\r\n        data = data[0];\r\n        model[properties[0]] = data;\r\n        model[this.props.propertyId] = data[\"id\"];\r\n        if (this.props.parent != null && this.props.parent != undefined) {\r\n          let parent = document.getElementById(this.props.parent.props.id);\r\n          let propertie2 = this.props.property2.split(\r\n            this.props.fieldSeparator\r\n          );\r\n          parent.value = data[propertie2[propertie2.length - 1]];\r\n        }\r\n      } else {\r\n        valueRender = null;\r\n        model[this.props.propertyId] = null;\r\n        if (this.props.parent != null && this.props.parent != undefined) {\r\n          let parent = document.getElementById(this.props.parent.props.id);\r\n          parent.value = \"\";\r\n        }\r\n      }\r\n    }\r\n\r\n    if (properties.length <= 1) {\r\n      model[properties[0]] = valueRender;\r\n    } else if (properties.length == 2) {\r\n      model[properties[0]][properties[1]] = valueRender;\r\n    }\r\n\r\n    let type = this.getType();\r\n\r\n    if (valueRender == null) {\r\n      if (type == \"text\" || type == \"textarea\") {\r\n        valueRender = \"\";\r\n      } else if (type == \"number\") {\r\n        valueRender = 0;\r\n      } else if (type == \"checkbox\") {\r\n        valueRender = false;\r\n      } else if (type == \"color\") {\r\n        valueRender = \"#ffffff\";\r\n      }\r\n    }\r\n\r\n    if (this.state.value != valueRender) {\r\n      this.setState({ change: true, value: valueRender });\r\n    }\r\n  }\r\n\r\n  fixService() {\r\n    if (\r\n      this.props.serviceName != null &&\r\n      this.props.serviceName != undefined &&\r\n      this.service == null\r\n    ) {\r\n      this.service = RFContext.contextResolver.getService(\r\n        this.props.serviceName\r\n      );\r\n    }\r\n  }\r\n\r\n  async onChange(event, search) {\r\n    const self = this;\r\n    let responseMethod = null;\r\n    try {\r\n      responseMethod = await UtilsError.applyFunctionWithHandlerError(() => {\r\n        if (self.executeLostFocus && !self.props.disabled) {\r\n          let value = event.target.value;\r\n          let type = self.getType();\r\n\r\n          if (type == \"checkbox\") {\r\n            value = event.target.checked;\r\n          }\r\n          self.fixValue(value, search);\r\n        }\r\n        self.executeLostFocus = true;\r\n      });\r\n    } catch (exception) {\r\n      responseMethod = UtilsError.getResponseMethodFromException(exception);\r\n    }\r\n\r\n    if (responseMethod.hasError()) {\r\n      this.renderError(responseMethod);\r\n    }\r\n  }\r\n\r\n  async onKeyDown(event) {\r\n    //console.log(event.keyCode);\r\n    const self = this;\r\n    let responseMethod = null;\r\n    try {\r\n      responseMethod = await UtilsError.applyFunctionWithHandlerError(() => {\r\n        // F4\r\n        if (\r\n          event.keyCode == 115 &&\r\n          !self.props.disabled &&\r\n          self.props.idButton != null &&\r\n          self.props.idButton != undefined\r\n        ) {\r\n          let button = document.getElementById(self.props.idButton);\r\n          if (button != null && button != undefined) {\r\n            self.executeLostFocus = false;\r\n            button.click();\r\n          }\r\n        }\r\n      });\r\n    } catch (exception) {\r\n      responseMethod = UtilsError.getResponseMethodFromException(exception);\r\n    }\r\n\r\n    if (responseMethod.hasError()) {\r\n      this.renderError(responseMethod);\r\n    }\r\n  }\r\n}\r\n\r\nBaseInputComponent.propTypes = {\r\n  app: PropTypes.object,\r\n  model: PropTypes.object,\r\n  property: PropTypes.string,\r\n  crudComponent: PropTypes.object,\r\n  required: PropTypes.bool,\r\n  disabled: PropTypes.bool,\r\n  rendered: PropTypes.bool,\r\n  max: PropTypes.any,\r\n  size: PropTypes.any,\r\n  min: PropTypes.any,\r\n  defaultstyleClass: PropTypes.string,\r\n  styleClass: PropTypes.string,\r\n  label: PropTypes.string,\r\n  parent: PropTypes.object,\r\n  value: PropTypes.any,\r\n  propertyFind: PropTypes.string,\r\n  property2: PropTypes.string,\r\n  rows: PropTypes.any,\r\n  cols: PropTypes.any,\r\n  idButton: PropTypes.string,\r\n  tag: PropTypes.string,\r\n  fieldSeparator: PropTypes.string,\r\n};\r\n\r\nBaseInputComponent.defaultProps = {\r\n  required: false,\r\n  disabled: false,\r\n  rendered: true,\r\n  max: \"0\",\r\n  size: \"0\",\r\n  min: \"0\",\r\n  defaultstyleClass: \"InputTextComponent\",\r\n  styleClass: \"\",\r\n  label: null,\r\n  parent: null,\r\n  value: \"\",\r\n  propertyFind: \"code\",\r\n  rows: \"40\",\r\n  cols: \"40\",\r\n  idButton: null,\r\n  tag: \"Input\",\r\n  fieldSeparator: \"_FIELD_SEPARATOR_\",\r\n};\r\n","import React from \"react\";\r\nimport BaseInputComponent from \"../baseInput\";\r\n/**\r\n * Input textarea component\r\n */\r\nexport default class TextAreaComponent extends BaseInputComponent {\r\n  getType() {\r\n    return \"textarea\";\r\n  }\r\n\r\n  /**\r\n   * Function for render element\r\n   */\r\n  renderInput() {\r\n    let inputRender = null;\r\n    if (this.props.rendered) {\r\n      inputRender = (\r\n        <div className=\"InputTextAreaCardDiv\">\r\n          <textarea\r\n            id={this.props.id}\r\n            required={this.props.required}\r\n            disabled={this.props.disabled}\r\n            rows={this.props.rows}\r\n            cols={this.props.cols}\r\n            label={this.props.label}\r\n            maxLength={this.props.max}\r\n            className={\r\n              this.props.defaultstyleClass + \" \" + this.props.styleClass\r\n            }\r\n            value={this.state.value}\r\n            onChange={(event) => this.onChange(event)}\r\n            onBlur={(event) => this.onChange(event, true)}\r\n          ></textarea>\r\n        </div>\r\n      );\r\n    } else {\r\n      inputRender = <div style={{ display: \"none\" }}></div>;\r\n    }\r\n    return inputRender;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./index.css\";\r\nimport BasePage from \"rfreactlib/base/basePage\";\r\nimport RFContext from \"rfreactlib/context\";\r\nimport TextAreaComponent from \"rfreactlib/input/textarea\";\r\nimport UtilsBytes from \"rfreactlib/utils/UtilsBytes\";\r\nimport UtilsCommons from \"rfreactlib/utils/UtilsCommons\";\r\n\r\n/**\r\n * HexToDecimalComponent component\r\n */\r\nexport default class HexToDecimalComponent extends BasePage {\r\n  value;\r\n  result;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.value = \"\";\r\n    this.result = \"\";\r\n    this.transform = this.transform.bind(this);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"FullContainer\">\r\n        <TextAreaComponent\r\n          key={this.uniqueID()}\r\n          id={this.uniqueID()}\r\n          label={RFContext.i18n.__(\"app.value\")}\r\n          model={this}\r\n          rows=\"10\"\r\n          cols=\"50\"\r\n          max=\"10000\"\r\n          property=\"value\"\r\n        />\r\n        <TextAreaComponent\r\n          key={this.uniqueID()}\r\n          id={this.uniqueID()}\r\n          label={RFContext.i18n.__(\"app.result\")}\r\n          model={this}\r\n          rows=\"10\"\r\n          cols=\"50\"\r\n          max=\"10000\"\r\n          disabled={true}\r\n          property=\"result\"\r\n        />\r\n        <div className=\"ButtonDiv\">\r\n          <button className=\"AppBtns\" onClick={this.transform}>\r\n            {RFContext.i18n.__(\"app.transform\")}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  transform() {\r\n    this.result = \"\";\r\n    let tmpResult = UtilsBytes.hexToDecimal(this.value);\r\n    if (UtilsCommons.isNotNull(tmpResult)) {\r\n      this.result = \"\" + tmpResult;\r\n    }\r\n    this.changeState();\r\n  }\r\n}\r\n"],"sourceRoot":""}